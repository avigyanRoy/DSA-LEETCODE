QUESTION:

Given two positive integers n and k, the binary string Sn is formed as follows:

S1 = "0"
Si = Si - 1 + "1" + reverse(invert(Si - 1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

 

Example 1:

Input: n = 3, k = 1
Output: "0"
Explanation: S3 is "0111001".
The 1st bit is "0".
Example 2:

Input: n = 4, k = 11
Output: "1"
Explanation: S4 is "011100110110001".
The 11th bit is "1".
 

Constraints:

1 <= n <= 20
1 <= k <= 2n - 1


CODE SOLUTION:

class Solution {
public:
    string invert(string S){
        for(int i=0;i<S.length();i++){
            if(S[i]=='1'){
                S[i]='0';
            }
            else{
                S[i]='1';
            }
        }
        return S;
    }
    
    string reverse(string s){
        for(int i=0;i<s.length()/2;i++){
            char temp=s[i];
            s[i]=s[s.length()-1-i];
            s[s.length()-1-i]=temp;
        }
        return s;
    }
    
    char findKthBit(int n, int k) {
        string S="0";
        for(int i=0;i<n;i++){
            S=S+"1"+reverse(invert(S));
        }
        return S[k-1];
    }
};

PERFORMANCE:

Runtime: 261 ms, faster than 9.16% of C++ online submissions for Find Kth Bit in Nth Binary String.
Memory Usage: 140.1 MB, less than 14.73% of C++ online submissions for Find Kth Bit in Nth Binary String.
