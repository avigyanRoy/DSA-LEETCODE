QUESTION:

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

CODE SOLUTION:

Approach: careful observation reveals that the number of ways in each step forms a fibonacci sequence

class Solution {
public:
    int climbStairs(int n) {
        int pre=1;
        int curr=1;
        int temp;
        for(int i=1;i<n;i++){
            temp=curr;
            curr=curr+pre;
            pre=temp;
        }
        return curr;
    }
};

PERFORMANCE:

Runtime: 3 ms, faster than 36.17% of C++ online submissions for Climbing Stairs.
Memory Usage: 5.8 MB, less than 83.43% of C++ online submissions for Climbing Stairs.
